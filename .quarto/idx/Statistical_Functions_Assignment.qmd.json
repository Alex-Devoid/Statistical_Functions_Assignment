{"title":"ST558-HW4","markdown":{"yaml":{"title":"ST558-HW4","format":"html","author":"Alex Devoid","date":"June 18, 2024","purpose":"ST558-HW4"},"headingText":"Task 1: Conceptual Questions","containsRefs":false,"markdown":"\n\n\n1.  **What is the purpose of the `lapply()` function? What is the equivalent `purrr` function?**\n\n    The `lapply()` function in R is used to apply a function over a list or vector and return a list of the same length as the input. The equivalent function in the `purrr` package is `map()`, which also returns a list.\n\n2.  **Suppose we have a list called `my_list`. Each element of the list is a numeric data frame (all columns are numeric). We want to use `lapply()` to run the code `cor(numeric_matrix, method = \"kendall\")` on each element of the list. Write code to do this below! (I'm really trying to ask you how you specify `method = \"kendall\"` when calling `lapply()`)**\n\n``` r\nmy_list <- list(\n  data.frame(a = rnorm(10), b = rnorm(10)),\n  data.frame(a = rnorm(10), b = rnorm(10))\n)\n\nresult <- lapply(my_list, function(x) cor(x, method = \"kendall\"))\n```\n\n3.  **What are two advantages of using `purrr` functions instead of the BaseR apply family?**\n\n    -   `purrr` functions have a consistent syntax and naming convention, making the code easier to read and write.\n    -   `purrr` functions provide better error handling and more options for managing complex data structures, such as lists and nested lists.\n\n4.  **What is a side-effect function?**\n\n    A side-effect function is a function that performs an action or produces an effect beyond returning a value. Examples of side effects include modifying a global variable, printing output to the console, writing to a file, or modifying the state of an object.\n\n5.  **Why can you name a variable `sd` in a function and not cause any issues with the `sd` function?**\n\n    In R, the scope of a variable inside a function is limited to that function. This means that naming a variable `sd` within a function does not interfere with the global `sd` function because R can differentiate between the local variable and the global function based on the context in which they are used.\n\n# Task 2 - Writing R Functions\n\n1.  **Write a basic function (call it getRMSE()) that takes in a vector of responses and a vector of predictions and outputs the RMSE.**\n\n``` r\nlibrary(tidyverse)\ngetRMSE <- function(actual, predicted, ...) {\nsqrt(mean((actual - predicted)^2, ...))\n}\n```\n\n2.  **Run the following code to create some response values and predictions. Test your RMSE function using this data.**\n\n``` r\nset.seed(10)\nn <- 100\nx <- runif(n)\nresp <- 3 + 10*x + rnorm(n)\npred <- predict(lm(resp ~ x), data.frame(x))\n\n# Test RMSE function\ngetRMSE(resp, pred)\n\n# Introduce NA values\nresp[c(1, 2)] <- NA\n\n# Test RMSE function with NA values\ngetRMSE(resp, pred, na.rm = TRUE)\n```\n\n3.  **Write a function called getMAE() that follows the specifications of the getRMSE() function.**\n\n    ``` r\n    getMAE <- function(actual, predicted, ...) {\n      mean(abs(actual - predicted), ...)\n    }\n    ```\n\n4.  **Run the following code to create some response values and predictions. Test your MAE function using this data.**\n\n    ``` r\n    set.seed(10)\n    n <- 100\n    x <- runif(n)\n    resp <- 3 + 10*x + rnorm(n)\n    pred <- predict(lm(resp ~ x), data.frame(x))\n\n    # Test MAE function\n    getMAE(resp, pred)\n\n    # Introduce NA values\n    resp[c(1, 2)] <- NA\n\n    # Test MAE function with NA values\n    getMAE(resp, pred, na.rm = TRUE)\n    ```\n\n5.  **Create a wrapper function that can be used to get either or both metrics returned with a single function call.**\n\n    ``` r\n    getMetrics <- function(actual, predicted, metrics = c(\"RMSE\", \"MAE\"), ...) {\n      if (!(is.vector(actual) && is.atomic(actual) && is.numeric(actual) &&\n            is.vector(predicted) && is.atomic(predicted) && is.numeric(predicted))) {\n        message(\"Both inputs must be numeric vectors.\")\n        return(NULL)\n      }\n\n      results <- list()\n      if (\"RMSE\" %in% metrics) results$RMSE <- getRMSE(actual, predicted, ...)\n      if (\"MAE\" %in% metrics) results$MAE <- getMAE(actual, predicted, ...)\n\n      return(results)\n    }\n    ```\n\n6.  **Run the following code to create some response values and predictions. Test your new function using this data.**\n\n    ``` r\n    set.seed(10)\n    n <- 100\n    x <- runif(n)\n    resp <- 3 + 10*x + rnorm(n)\n    pred <- predict(lm(resp ~ x), data.frame(x))\n\n    # Test getMetrics function\n    getMetrics(resp, pred)\n    getMetrics(resp, pred, metrics = \"RMSE\")\n    getMetrics(resp, pred, metrics = \"MAE\")\n\n    # Introduce NA values\n    resp[c(1, 2)] <- NA\n\n    # Test getMetrics function with NA values\n    getMetrics(resp, pred, na.rm = TRUE)\n\n    # Test with incorrect data\n    getMetrics(data.frame(resp), pred)\n    getMetrics(resp, data.frame(pred))\n    ```\n\n# Task 3 - Querying an API and a Tidy-Style Function\n\n1.  **Use GET() from the httr package to return information about a topic that you are interested in that has been in the news lately.**\n\n    ``` r\n    library(httr)\n    library(dplyr)\n\n    api_key <- \"98bec7bb7a124469b04c6e019b33abee\"\n    url <- \"https://newsapi.org/v2/everything\"\n    params <- list(\n      q = \"technology\",\n      from = Sys.Date() - 30,\n      sortBy = \"publishedAt\",\n      apiKey = api_key\n    )\n\n    response <- GET(url, query = params)\n    articles <- content(response)$articles\n    articles_df <- bind_rows(lapply(articles, as.data.frame))\n    ```\n\n2.  **Parse what is returned and find your way to the data frame that has the actual article information in it.**\n\n    ``` r\n    articles_df <- bind_rows(lapply(articles, as.data.frame))\n    ```\n\n3.  **Write a quick function that allows the user to easily query this API.**\n\n    ``` r\n    get_news <- function(query, from_date, api_key) {\n      url <- \"https://newsapi.org/v2/everything\"\n      params <- list(\n        q = query,\n        from = from_date,\n        sortBy = \"publishedAt\",\n        apiKey = api_key\n      )\n      response <- GET(url, query = params)\n      articles <- content(response)$articles\n      articles_df <- bind_rows(lapply(articles, as.data.frame))\n      return(articles_df)\n    }\n\n    # Test the function\n    news1 <- get_news(\"technology\", Sys.Date() - 30, api_key)\n    news2 <- get_news(\"science\", Sys.Date() - 30, api_key)\n    ```\n","srcMarkdownNoYaml":"\n\n# Task 1: Conceptual Questions\n\n1.  **What is the purpose of the `lapply()` function? What is the equivalent `purrr` function?**\n\n    The `lapply()` function in R is used to apply a function over a list or vector and return a list of the same length as the input. The equivalent function in the `purrr` package is `map()`, which also returns a list.\n\n2.  **Suppose we have a list called `my_list`. Each element of the list is a numeric data frame (all columns are numeric). We want to use `lapply()` to run the code `cor(numeric_matrix, method = \"kendall\")` on each element of the list. Write code to do this below! (I'm really trying to ask you how you specify `method = \"kendall\"` when calling `lapply()`)**\n\n``` r\nmy_list <- list(\n  data.frame(a = rnorm(10), b = rnorm(10)),\n  data.frame(a = rnorm(10), b = rnorm(10))\n)\n\nresult <- lapply(my_list, function(x) cor(x, method = \"kendall\"))\n```\n\n3.  **What are two advantages of using `purrr` functions instead of the BaseR apply family?**\n\n    -   `purrr` functions have a consistent syntax and naming convention, making the code easier to read and write.\n    -   `purrr` functions provide better error handling and more options for managing complex data structures, such as lists and nested lists.\n\n4.  **What is a side-effect function?**\n\n    A side-effect function is a function that performs an action or produces an effect beyond returning a value. Examples of side effects include modifying a global variable, printing output to the console, writing to a file, or modifying the state of an object.\n\n5.  **Why can you name a variable `sd` in a function and not cause any issues with the `sd` function?**\n\n    In R, the scope of a variable inside a function is limited to that function. This means that naming a variable `sd` within a function does not interfere with the global `sd` function because R can differentiate between the local variable and the global function based on the context in which they are used.\n\n# Task 2 - Writing R Functions\n\n1.  **Write a basic function (call it getRMSE()) that takes in a vector of responses and a vector of predictions and outputs the RMSE.**\n\n``` r\nlibrary(tidyverse)\ngetRMSE <- function(actual, predicted, ...) {\nsqrt(mean((actual - predicted)^2, ...))\n}\n```\n\n2.  **Run the following code to create some response values and predictions. Test your RMSE function using this data.**\n\n``` r\nset.seed(10)\nn <- 100\nx <- runif(n)\nresp <- 3 + 10*x + rnorm(n)\npred <- predict(lm(resp ~ x), data.frame(x))\n\n# Test RMSE function\ngetRMSE(resp, pred)\n\n# Introduce NA values\nresp[c(1, 2)] <- NA\n\n# Test RMSE function with NA values\ngetRMSE(resp, pred, na.rm = TRUE)\n```\n\n3.  **Write a function called getMAE() that follows the specifications of the getRMSE() function.**\n\n    ``` r\n    getMAE <- function(actual, predicted, ...) {\n      mean(abs(actual - predicted), ...)\n    }\n    ```\n\n4.  **Run the following code to create some response values and predictions. Test your MAE function using this data.**\n\n    ``` r\n    set.seed(10)\n    n <- 100\n    x <- runif(n)\n    resp <- 3 + 10*x + rnorm(n)\n    pred <- predict(lm(resp ~ x), data.frame(x))\n\n    # Test MAE function\n    getMAE(resp, pred)\n\n    # Introduce NA values\n    resp[c(1, 2)] <- NA\n\n    # Test MAE function with NA values\n    getMAE(resp, pred, na.rm = TRUE)\n    ```\n\n5.  **Create a wrapper function that can be used to get either or both metrics returned with a single function call.**\n\n    ``` r\n    getMetrics <- function(actual, predicted, metrics = c(\"RMSE\", \"MAE\"), ...) {\n      if (!(is.vector(actual) && is.atomic(actual) && is.numeric(actual) &&\n            is.vector(predicted) && is.atomic(predicted) && is.numeric(predicted))) {\n        message(\"Both inputs must be numeric vectors.\")\n        return(NULL)\n      }\n\n      results <- list()\n      if (\"RMSE\" %in% metrics) results$RMSE <- getRMSE(actual, predicted, ...)\n      if (\"MAE\" %in% metrics) results$MAE <- getMAE(actual, predicted, ...)\n\n      return(results)\n    }\n    ```\n\n6.  **Run the following code to create some response values and predictions. Test your new function using this data.**\n\n    ``` r\n    set.seed(10)\n    n <- 100\n    x <- runif(n)\n    resp <- 3 + 10*x + rnorm(n)\n    pred <- predict(lm(resp ~ x), data.frame(x))\n\n    # Test getMetrics function\n    getMetrics(resp, pred)\n    getMetrics(resp, pred, metrics = \"RMSE\")\n    getMetrics(resp, pred, metrics = \"MAE\")\n\n    # Introduce NA values\n    resp[c(1, 2)] <- NA\n\n    # Test getMetrics function with NA values\n    getMetrics(resp, pred, na.rm = TRUE)\n\n    # Test with incorrect data\n    getMetrics(data.frame(resp), pred)\n    getMetrics(resp, data.frame(pred))\n    ```\n\n# Task 3 - Querying an API and a Tidy-Style Function\n\n1.  **Use GET() from the httr package to return information about a topic that you are interested in that has been in the news lately.**\n\n    ``` r\n    library(httr)\n    library(dplyr)\n\n    api_key <- \"98bec7bb7a124469b04c6e019b33abee\"\n    url <- \"https://newsapi.org/v2/everything\"\n    params <- list(\n      q = \"technology\",\n      from = Sys.Date() - 30,\n      sortBy = \"publishedAt\",\n      apiKey = api_key\n    )\n\n    response <- GET(url, query = params)\n    articles <- content(response)$articles\n    articles_df <- bind_rows(lapply(articles, as.data.frame))\n    ```\n\n2.  **Parse what is returned and find your way to the data frame that has the actual article information in it.**\n\n    ``` r\n    articles_df <- bind_rows(lapply(articles, as.data.frame))\n    ```\n\n3.  **Write a quick function that allows the user to easily query this API.**\n\n    ``` r\n    get_news <- function(query, from_date, api_key) {\n      url <- \"https://newsapi.org/v2/everything\"\n      params <- list(\n        q = query,\n        from = from_date,\n        sortBy = \"publishedAt\",\n        apiKey = api_key\n      )\n      response <- GET(url, query = params)\n      articles <- content(response)$articles\n      articles_df <- bind_rows(lapply(articles, as.data.frame))\n      return(articles_df)\n    }\n\n    # Test the function\n    news1 <- get_news(\"technology\", Sys.Date() - 30, api_key)\n    news2 <- get_news(\"science\", Sys.Date() - 30, api_key)\n    ```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Statistical_Functions_Assignment.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","title":"ST558-HW4","author":"Alex Devoid","date":"June 18, 2024","purpose":"ST558-HW4"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}