# Test getMetrics function with NA values
getMetrics(resp, pred, na.rm = TRUE)
# Test with incorrect data
getMetrics(data.frame(resp), pred)
getMetrics(resp, data.frame(pred))
library(httr)
library(dplyr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
articles_df <- bind_rows(lapply(articles, as.data.frame))
my_list <- list(
data.frame(a = rnorm(10), b = rnorm(10)),
data.frame(a = rnorm(10), b = rnorm(10))
)
result <- lapply(my_list, function(x) cor(x, method = "kendall"))
library(tidyverse)
getRMSE <- function(actual, predicted, ...) {
sqrt(mean((actual - predicted)^2, ...))
}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
# Test RMSE function
getRMSE(resp, pred)
# Introduce NA values
resp[c(1, 2)] <- NA
# Test RMSE function with NA values
getRMSE(resp, pred, na.rm = TRUE)
getMAE <- function(actual, predicted, ...) {
mean(abs(actual - predicted), ...)
}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
# Test MAE function
getMAE(resp, pred)
# Introduce NA values
resp[c(1, 2)] <- NA
# Test MAE function with NA values
getMAE(resp, pred, na.rm = TRUE)
getMetrics <- function(actual, predicted, metrics = c("RMSE", "MAE"), ...) {
if (!(is.vector(actual) && is.atomic(actual) && is.numeric(actual) &&
is.vector(predicted) && is.atomic(predicted) && is.numeric(predicted))) {
message("Both inputs must be numeric vectors.")
return(NULL)
}
results <- list()
if ("RMSE" %in% metrics) results$RMSE <- getRMSE(actual, predicted, ...)
if ("MAE" %in% metrics) results$MAE <- getMAE(actual, predicted, ...)
return(results)
}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
# Test getMetrics function
getMetrics(resp, pred)
getMetrics(resp, pred, metrics = "RMSE")
getMetrics(resp, pred, metrics = "MAE")
# Introduce NA values
resp[c(1, 2)] <- NA
# Test getMetrics function with NA values
getMetrics(resp, pred, na.rm = TRUE)
# Test with incorrect data
getMetrics(data.frame(resp), pred)
getMetrics(resp, data.frame(pred))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to convert each article to a data frame, filling missing columns with NA
safe_as_data_frame <- function(article) {
df <- as.data.frame(article)
# Ensure all data frames have the same columns
all_cols <- c("source", "author", "title", "description", "url", "publishedAt", "content")
missing_cols <- setdiff(all_cols, names(df))
df[missing_cols] <- NA
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
article <- article[fields]
# Convert to data frame, filling missing columns with NA
df <- as.data.frame(article, stringsAsFactors = FALSE)
df[setdiff(fields, names(df))] <- NA
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
article <- article[fields]
# Convert to data frame, filling missing columns with NA
df <- as.data.frame(article, stringsAsFactors = FALSE)
df[setdiff(fields, names(df))] <- NA
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Fill missing fields with NA
article[setdiff(fields, names(article))] <- NA
# Flatten the source field
article$source.id <- article$source$id
article$source.name <- article$source$name
article$source <- NULL
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "Bitcoin",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Fill missing fields with NA
article[setdiff(fields, names(article))] <- NA
# Flatten the source field
article$source.id <- article$source$id
article$source.name <- article$source$name
article$source <- NULL
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "Apple",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
print(articles)
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Fill missing fields with NA
article[setdiff(fields, names(article))] <- NA
# Flatten the source field
article$source.id <- article$source$id
article$source.name <- article$source$name
article$source <- NULL
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Flatten the source field
article$source.id <- article$source$id
article$source.name <- article$source$name
article$source <- NULL
# Fill missing fields with NA
article[setdiff(fields, names(article))] <- NA
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Flatten the source field
article$source.id <- article$source$id
article$source.name <- article$source$name
article$source <- NULL
# Fill missing fields with NA
article[setdiff(fields, names(article))] <- NA
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Print the raw articles to inspect their structure
print("Raw articles:")
print(articles)
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Print the article before processing
print("Original article:")
print(article)
# Flatten the source field
article$source.id <- article$source$id
article$source.name <- article$source$name
article$source <- NULL
# Fill missing fields with NA
article[setdiff(fields, names(article))] <- NA
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
# Print the data frame to inspect the conversion
print("Converted data frame:")
print(df)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Print the raw articles to inspect their structure
print("Raw articles:")
print(articles)
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Print the article before processing
print("Original article:")
print(article)
# Flatten the source field
article$source.id <- ifelse(is.null(article$source$id), NA, article$source$id)
article$source.name <- ifelse(is.null(article$source$name), NA, article$source$name)
article$source <- NULL
# Fill missing fields with NA
for (field in fields) {
if (!field %in% names(article)) {
article[[field]] <- NA
}
}
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
# Print the data frame to inspect the conversion
print("Converted data frame:")
print(df)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Print the raw articles to inspect their structure
print("Raw articles:")
print(articles)
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Print the article before processing
print("Original article:")
print(article)
# Flatten the source field
article$source.id <- ifelse(is.null(article$source$id), NA, article$source$id)
article$source.name <- ifelse(is.null(article$source$name), NA, article$source$name)
article$source <- NULL
# Fill missing fields with NA
for (field in fields) {
if (!field %in% names(article)) {
article[[field]] <- NA
}
}
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
# Print the data frame to inspect the conversion
print("Converted data frame:")
print(df)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Print the raw articles to inspect their structure
print("Raw articles:")
print(articles[:11])
library(httr)
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Print the raw articles to inspect their structure
print("Raw articles:")
print(articles[0])
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Print the article before processing
print("Original article:")
print(article)
# Flatten the source field
article$source.id <- ifelse(is.null(article$source$id), NA, article$source$id)
article$source.name <- ifelse(is.null(article$source$name), NA, article$source$name)
article$source <- NULL
# Fill missing fields with NA
for (field in fields) {
if (!field %in% names(article)) {
article[[field]] <- NA
}
}
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
# Print the data frame to inspect the conversion
print("Converted data frame:")
print(df)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
library(httr)
library(httr)
library(dplyr)
library(purrr)
api_key <- "98bec7bb7a124469b04c6e019b33abee"
url <- "https://newsapi.org/v2/everything"
params <- list(
q = "technology",
from = Sys.Date() - 30,
sortBy = "publishedAt",
apiKey = api_key
)
response <- GET(url, query = params)
articles <- content(response)$articles
# Print the raw articles to inspect their structure
print("Raw articles:")
print(articles[0])
# Function to safely convert each article to a data frame
safe_as_data_frame <- function(article) {
# Ensure all expected fields are present
fields <- c("source.id", "source.name", "author", "title", "description", "url", "urlToImage", "publishedAt", "content")
# Print the article before processing
print("Original article:")
print(article)
# Flatten the source field
article$source.id <- ifelse(is.null(article$source$id), NA, article$source$id)
article$source.name <- ifelse(is.null(article$source$name), NA, article$source$name)
article$source <- NULL
# Fill missing fields with NA
for (field in fields) {
if (!field %in% names(article)) {
article[[field]] <- NA
}
}
# Convert to data frame
df <- as.data.frame(article, stringsAsFactors = FALSE)
# Print the data frame to inspect the conversion
print("Converted data frame:")
print(df)
return(df)
}
articles_df <- bind_rows(lapply(articles, safe_as_data_frame))
